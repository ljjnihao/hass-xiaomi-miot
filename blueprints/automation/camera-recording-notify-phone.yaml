blueprint:
  name: Camera Recording and Notify / 摄像头或门铃录像并通知到手机
  description: |
    ### 🎦 Guides:
    1. Add the script for saving the video recording / 添加保存录像脚本
        ```yaml
        # configuration.yaml
        shell_command:
          # other commands ...
          save_xiaomi_video: |
            bash -c '
              mp4="{{ name|default('latest') }}.mp4"
              dir="{{ dir|default('/media/camera',true) }}"
              mkdir -p "$dir" && cd "$dir"
              script=/config/custom_components/xiaomi_miot/scripts/save_xiaomi_video.sh
              if [ -f "$script" ]; then
                bash "$script" "{{ url }}" "$mp4"
              else
                ffmpeg -y -i "{{ url }}" -c copy "$mp4"
              fi
              ls *.mp4 | sort | head -n -{{ keep|default(100) }} | xargs rm -vf
              if [ -n "{{ img }}" ]; then
                curl -o "{{ name|default('latest') }}.jpg" "{{ img }}"
                ls *.jpg | sort | head -n -{{ keep|default(100) }} | xargs rm -vf
              fi
            '
        ```
    2. Restart Home Assistant / 重启 Home Assistant

  domain: automation
  input:
    camera:
      name: Camera or Doorbell
      description: 通过Xiaomi Miot集成的摄像机或门铃实体
      selector:
        entity:
          domain: camera
          integration: xiaomi_miot

    mihome_notify:
      name: Mihome message entity
      description: 米家消息实体，用于减小获取录像的延迟 `sensor.mi_xxxx_message`
      selector:
        entity:
          domain: sensor
          integration: xiaomi_miot

    mihome_notify_kwd:
      name: Camera name in mihome
      description: 摄像机在米家中的名称(关键词)，用于减小获取录像的延迟
      selector:
        text:
      default: ''

    notify_device:
      name: Device to notify
      description: |
        Need to install the official Home Assistant app to receive notifications
        需安装官方[Home Assistant应用](https://companion.home-assistant.io)以接收通知的移动设备
      selector:
        device:
          integration: mobile_app

    notification_title:
      name: Notification title
      description: 通知标题
      default: '{{ home_name }}{{ camera_device_name }}'

    notification_message:
      name: Notification content
      description: 通知内容
      default: '{{ event }}'

    notification_actions:
      name: Notification actions
      description: 通知操作按钮，建议保持默认
      selector:
        object:
      default:
        - action: URI
          title: 打开米家
          uri: '{{ app_link }}'
        - action: none
          title: 我知道了

    save_dir:
      name: Save dir
      description: 保存路径，如：`/media/camera` `/config/www/doorbell`
      default: /media/camera

    keep_num:
      name: The number of recorded videos to retain
      description: 保留录像数量
      default: 100
      selector:
        number:
            min: 1
            max: 2000
            mode: slider

    external_url:
      name: External url
      description: 外部访问地址，https://your.hass.domain:8123
      default: ''

    video_events:
      name: Video event mapping
      description: 视频事件映射
      selector:
        object:
      default:
        PeopleMotion: 有人移动
        ObjectMotion: 画面变动
        Pass: 有人在门前经过
        PassBell: 有人按门铃
        PassStay: 有人在门前停留

mode: queued
triggers:
  - platform: state
    entity_id: !input camera
    attribute: motion_video_time
    id: new_video
  - platform: state
    entity_id: !input mihome_notify
    id: mihome_notify

variables:
  camera_entity_id: !input camera
  camera_device_id: "{{ device_id(camera_entity_id) }}"
  camera_device_name: "{{ device_attr(camera_device_id,'name') }}"
  camera_info_id: "{{ device_entities(camera_device_id) | select('match','button.+_info') | join }}"
  camera_battery_id: "{{ device_entities(camera_device_id) | select('match','sensor.*_battery') | join }}"
  mihome_notify_kwd: !input mihome_notify_kwd
  mihome_notify_name: "{{ mihome_notify_kwd or camera_device_name }}"
  save_dir: !input save_dir
  save_url: "{{ save_dir | replace('/media/','/media/local/') | replace('/config/www','/local') }}"
  video_events: !input video_events
  external_url: !input external_url

actions:
  - choose:
      - conditions:
          - condition: trigger
            id: mihome_notify
          - condition: template
            value_template: "{{ mihome_notify_name in trigger.to_state.state }}"
        sequence:
          - action: homeassistant.update_entity
            target:
              entity_id: "{{ camera_entity_id }}"

      - conditions:
          - condition: trigger
            id: new_video
        sequence:
          - variables:
              stream_url: "{{ state_attr(camera_entity_id,'stream_address') }}"
              motion_video_time: >-
                {{ state_attr(camera_entity_id,'motion_video_time')|regex_replace('[\s:+-]','') }}
              motion_video_type: >-
                {{ state_attr(camera_entity_id,'motion_video_type')|regex_replace('[\s:+-]','') }}
              mp4_name: "{{ motion_video_time }}-{{ motion_video_type }}"
              mp4_path: "{{ save_url }}/{{ mp4_name }}.mp4"
              img_path: "{{ (external_url~state_attr(camera_entity_id,'entity_picture')) if external_url else '' }}"
              battery: "{{ states(camera_battery_id)|int(0) if camera_battery_id else '' }}"
              event: "{{ (video_events or {}).get(motion_video_type, motion_video_type) }}"
              app_link: "{{ state_attr(camera_info_id,'app_link') }}"
              home_room: "{{ state_attr(camera_info_id,'home_room') }}"
              home_name: "{{ (home_room|default('')).split()[0] }}"
              notification_title: !input notification_title
              notification_message: !input notification_message
              notification_actions: !input notification_actions
          - action: shell_command.save_xiaomi_video
            data:
              name: "{{ mp4_name }}"
              dir: "{{ save_dir }}"
              img: "{{ img_path }}"
              url: "{{ stream_url }}"
              keep: !input keep_num
            response_variable: action_result
          - device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: "{{ notification_title or camera_device_name }}"
            message: "{{ notification_message }}"
            data:
              image: "{{ img_path }}"
              video: "{{ mp4_path }}"
              url: /config/devices/device/{{ camera_device_id }}
              actions: "{{ notification_actions }}"
              push:
                tag: "{{ camera_entity_id }}"
                sound:
                  name: default
                  critical: "{{ 1 if 'Bell' in motion_video_type else 0 }}"
                  volume: 0.3